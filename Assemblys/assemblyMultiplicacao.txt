## Memória de dados ##

addr[0] - 0

addr[1] - Número que vai ser multiplicado

addr[2] - Quantidade de vezes

addr[3] - 1




//  espaço para guardar número multiplicado

addr[4],addr[5]



###########################

Rh // registrador Temporário

LDR Ra, addr[0] // Registrador do resultado mais significativo
LDR Rb, addr[0] // Registrador do resultado menos significativo
LDR Rc, addr[1] // Registrador com o incremento da multiplicação
LDR Rd, addr[2] // Registrador com o quantidade de vezes da multiplicação
LDR Re, addr[0] // Registrador para manter o zero para comparações
LDR Rg, addr[3] // registrador de incremento/decremento unitário
CMP Rh,Rd,Re // Comparar o registrador de quantidade de vezes com 0 ( value = 6)
JNZ 13
ADD Rb,Rb,Rc // Soma no registrador mais baixo
JNC  11	    // Se não tiver carry, ignora o incremento no registrador mais alto
ADD Ra, Ra, Rg// incrementa no registrador mais alto
SUB Rd, Rd, Rg// subtrai um da quantidade de vezes que ainda precisa multiplicar. (value 11)
JMP 6 // reinicia a rotina
STR Ra, addr[4] // salva na memória RAM o valor mais alto (value 13)
STR Rb, addr[5] // salva na memória RAM o valor mais baixo
HLT



****************************************

Memória de dados: datamemodata.mif

	0	: 0;
	1	: 11111111;
	2	: 1010;
	3	: 1;
	[4..255]  :   0;

Memória de instrução: datamemoinst.mif

	0: 0001000000000000;
	1: 0001000100000000;
	2: 0001001000000001;
	3: 0001001100000010;
	4: 0001010000000000;
	5: 0001011000000011;
	6: 1010011100110100;
	7: 1110000000001101;
	8: 0100000100010010;
	9:  1100000000001011;
	10: 0100000000000110;
	11: 0101001100110110;
	12: 1011000000000110;
	13: 0010000000000100;
	14: 0010000100000101;
	15: 0000000000000000;
	[16..255]  :   0000000000000000;



